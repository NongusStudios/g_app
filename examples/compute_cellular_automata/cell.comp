#version 450

layout (local_size_x = 256, local_size_y = 256) in;

uint GRID_SIZE_X = 256;

struct Cell {
    int type;
    int has_moved;
};
layout (std140, set = 0, binding = 0) buffer CellBuffer { Cell cells[]; } cell_buffer;

void main(){
    uint x = gl_GlobalInvocationID.x;
    uint y = gl_GlobalInvocationID.y;
    uint idx = x + y * GRID_SIZE_X;

    if(cell_buffer.cells[idx].has_moved == 0){
        switch(cell_buffer.cells[idx].type){
                case 2: // Sand
                    if(cell_buffer.cells[idx + GRID_SIZE_X].type == 0){
                        cell_buffer.cells[idx + GRID_SIZE_X].type = 2;
                        cell_buffer.cells[idx + GRID_SIZE_X].has_moved = 1;
                        cell_buffer.cells[idx].type = 0;
                    } else if(cell_buffer.cells[(idx-1) + GRID_SIZE_X].type == 0){
                        cell_buffer.cells[(idx-1) + GRID_SIZE_X].type = 2;
                        cell_buffer.cells[(idx-1) + GRID_SIZE_X].has_moved = 1;
                        cell_buffer.cells[idx].type = 0;
                    } else if(cell_buffer.cells[(idx+1) + GRID_SIZE_X].type == 0){
                        cell_buffer.cells[(idx+1) + GRID_SIZE_X].type = 2;
                        cell_buffer.cells[(idx+1) + GRID_SIZE_X].has_moved = 1;
                        cell_buffer.cells[idx].type = 0;
                    }
                    break;
                default:
                    break;
        }
    }
}